# This is sample SDL schema for GraphQL Faker.
#
# There are two directives you can use to enhance fake data:
#   - @fake
#   - @examples
# Each directive has autocompletion working so start by typing @
#
# Press save or Cmd+Enter to apply the changes and update server. Switch to GraphiQL
# on the left panel to immediately test your changes.
# This tool also supports extending existing APIs. Check graphql-faker --help
#
# Developed with ❤️ by APIs.guru | https://github.com/APIs-guru/graphql-faker
# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input CreateRecipeCategoryInput {
	title: String!
}

input CreateRecipeInput {
	categoryId: String!
	ingredients: [FoodItemInput!]!
	steps: [RecipeStepInput!]!
	time: String!
	title: String!
}

"""
The bedca Food Group
"""
type FoodGroup {
	id: ID! @fake(type: uuid)
	name: String! @fake(type: productName)
}

"""
The bedca Food Item Info
"""
type FoodInfo {
	foodValues(profile: Float = 3): [FoodValue!]! @listLength(min: 1, max: 10)
	id: ID! @fake(type: uuid)
	name: String @fake(type: productName)
}

"""
The bedca Food Item
"""
type FoodItem {
	id: ID! @fake(type: uuid)
	name: String! @fake(type: productName)
}

input FoodItemInput {
	id: String!
	name: String!
}

"""
The bedca Food Value
"""
type FoodValue {
	bedcaId: String! @fake(type: uuid)
	id: ID! @fake(type: uuid)
	name: String @fake(type: productName)
	total: Float @fake(type: number)
	unit: String @examples(values: ["g", "kJ"])
}

type Mutation {
	createRecipe(input: CreateRecipeInput!): Recipe!
	createRecipeCategory(input: CreateRecipeCategoryInput!): RecipeCategory!
	signup(input: UserInput!): User!
}

type Query {
	foodGroup(input: String!): [FoodItem!]! @listLength(min: 1, max: 10)
	foodGroups: [FoodGroup!]! @listLength(min: 1, max: 10)
	foodInfo(input: String!): FoodInfo
	me: User!
	recipe(id: String!): Recipe
	recipeCategories: [RecipeCategory!]! @listLength(min: 1, max: 10)
	recipes(limit: Int = 5, skip: Int = 0): [Recipe!]!
		@listLength(min: 10, max: 10)
	recipesByCategory(input: String!): [Recipe!]!
	recipeSteps(input: String!): [RecipeStep!]!
	signin(input: UserInput!): User
}

"""
The Recipe model
"""
type Recipe {
	category: RecipeCategory!
	categoryId: String!
	id: ID! @fake(type: uuid)
	info: FoodInfo
	ingredients: [FoodItem!]! @listLength(min: 1, max: 10)
	steps: [RecipeStep!]! @listLength(min: 1, max: 10)
	time: String! @fake(type: streetName)
	title: String! @fake(type: streetName)
	user: User!
	userId: String! @fake(type: uuid)
}

"""
The categories of the recipes
"""
type RecipeCategory {
	id: ID! @fake(type: uuid)
	title: String! @fake(type: productCategory)
}

"""
Steps Of the Recipe
"""
type RecipeStep {
	description: String @fake(type: productCategory)
	id: ID! @fake(type: uuid)
	img: String @fake(type: imageUrl)
	title: String! @fake(type: productName)
}

input RecipeStepInput {
	description: String
	img: String
	title: String!
}

"""
The User model
"""
type User {
	email: String! @fake(type: email)
	id: ID! @fake(type: uuid)
	username: String! @fake(type: firstName)
}

input UserInput {
	email: String!
	password: String!
	username: String!
}
